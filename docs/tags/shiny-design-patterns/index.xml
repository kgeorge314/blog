<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny Design Patterns on Locke Data Blog</title>
    <link>http://lockedata.uk/itsalockeblog/tags/shiny-design-patterns/</link>
    <description>Recent content in Shiny Design Patterns on Locke Data Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;This work is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;.</copyright>
    <lastBuildDate>Tue, 19 Apr 2016 10:15:19 +0000</lastBuildDate>
    
	<atom:link href="http://lockedata.uk/itsalockeblog/tags/shiny-design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiny module design patterns: Pass module inputs to other modules</title>
      <link>http://lockedata.uk/itsalockeblog/2016-04-19-shiny-module-design-patterns-pass-module-input-to-other-modules/</link>
      <pubDate>Tue, 19 Apr 2016 10:15:19 +0000</pubDate>
      
      <guid>http://lockedata.uk/itsalockeblog/2016-04-19-shiny-module-design-patterns-pass-module-input-to-other-modules/</guid>
      <description>&lt;p&gt;Continuing in the series of &lt;a href=&#34;https://itsalocke.com/tag/shiny-design-patterns/&#34;&gt;shiny module design patterns&lt;/a&gt;, this post covers how to pass all the inputs from one module to another.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Return &lt;code&gt;input&lt;/code&gt; from within the server call. Store the &lt;code&gt;callModule()&lt;/code&gt; result in a variable. Pass the variable into arguments for other modules. Access the variable like you would &lt;code&gt;input&lt;/code&gt;. &lt;a href=&#34;https://github.com/stephlocke/shinymodulesdesignpatterns&#34;&gt;Steal the code&lt;/a&gt; and, as always, if you can improve it do so!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shiny module design patterns: Pass module input to other modules</title>
      <link>http://lockedata.uk/itsalockeblog/2016-04-14-shiny-module-design-patterns-pass-module-inputs-modules/</link>
      <pubDate>Thu, 14 Apr 2016 12:05:55 +0000</pubDate>
      
      <guid>http://lockedata.uk/itsalockeblog/2016-04-14-shiny-module-design-patterns-pass-module-inputs-modules/</guid>
      <description>&lt;p&gt;Following on from looking at the &lt;a href=&#34;https://itsalocke.com/shiny-module-design-pattern-pass-inputs-one-module-another/&#34;&gt;shiny modules design pattern of passing an input value to many modules&lt;/a&gt;, I&amp;#8217;m now going to look at a more complex shiny module design pattern: passing an input from one module to another.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Return the input in a reactive expression from within the server call. Store the &lt;code&gt;callModule()&lt;/code&gt; result in a variable. Pass the variable into arguments for other modules. &lt;a href=&#34;https://github.com/stephlocke/shinymodulesdesignpatterns&#34;&gt;Steal the code&lt;/a&gt; and, as always, if you can improve it do so!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shiny module design patterns: Pass a single input to multiple modules</title>
      <link>http://lockedata.uk/itsalockeblog/2016-04-08-shiny-module-design-pattern-pass-inputs-one-module-another/</link>
      <pubDate>Fri, 08 Apr 2016 10:56:32 +0000</pubDate>
      
      <guid>http://lockedata.uk/itsalockeblog/2016-04-08-shiny-module-design-pattern-pass-inputs-one-module-another/</guid>
      <description>&lt;p&gt;For the awesome &lt;a href=&#34;https://www.eventbrite.com/e/shiny-developer-conference-registration-19153967031&#34;&gt;Shiny Developers Conference&lt;/a&gt; back in January, I endeavoured to learn about shiny modules and &lt;a href=&#34;https://itsalocke.com/declutter-a-shiny-reports-code-v2-0/&#34;&gt;overhaul an application&lt;/a&gt; using them in the space of two days. I succeeded and almost immediately switched onto other projects, thereby losing most of the hard-won knowledge! As I rediscover shiny modules and start putting them into more active use, I&amp;#8217;ll be blogging about design patterns. This post takes you through the case of multiple modules receiving the same input value.&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Stick overall config input objects at the app level and pass them in a reactive expression to &lt;code&gt;callModule()&lt;/code&gt;. Pass the results in as an extra argument into subsequent modules. These are reactive so don&amp;#8217;t forget the brackets. &lt;a href=&#34;https://github.com/stephlocke/shinymodulesdesignpatterns&#34;&gt;Steal the code&lt;/a&gt; and, as always, if you can improve it do so!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>