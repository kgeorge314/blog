<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Magrittr on Locke Data Blog</title>
    <link>https://itsalocke.com/blog/tags/magrittr/</link>
    <description>Recent content in Magrittr on Locke Data Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;This work is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;.</copyright>
    <lastBuildDate>Mon, 09 Feb 2015 11:51:23 +0000</lastBuildDate>
    
	<atom:link href="https://itsalocke.com/blog/tags/magrittr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>magrittr: cleaner program flow</title>
      <link>https://itsalocke.com/blog/magrittr-cleaner-program-flow/</link>
      <pubDate>Mon, 09 Feb 2015 11:51:23 +0000</pubDate>
      
      <guid>https://itsalocke.com/blog/magrittr-cleaner-program-flow/</guid>
      <description>&lt;p&gt;Last year I built a pretty sweet web service in R as part of the day job. However, not being well-versed in stuff like object-oriented programming, I did not do the best job of making the flow of my program particularly clear or robust. It wouldn&amp;#8217;t take multiple inputs properly and I found it to be tough to test. In spare moments, I took to cogitating how to improve things.&lt;/p&gt;

&lt;p&gt;I tried simply refactoring some of the functions but found my structure too cumbersome to allow much change. I tried starting afresh with an &lt;a href=&#34;http://adv-r.had.co.nz/OO-essentials.html&#34; title=&#34;Advanced R - OO programming&#34; target=&#34;_blank&#34;&gt;S4 system&lt;/a&gt; but was soon in a death spiral of class proliferation and no experience in how to stop it. After dabbling with different methods, I was getting pretty frustrated &amp;#8211; I want my code to be better and more maintainable!&lt;/p&gt;

&lt;p&gt;Now I&amp;#8217;m looking at &lt;a href=&#34;http://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html&#34; title=&#34;magrittr vignette on CRAN&#34; target=&#34;_blank&#34;&gt;magrittr&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;about-magrittr&#34;&gt;About magrittr&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;magrittr&lt;/code&gt; was designed to better facilitate &lt;a href=&#34;http://adv-r.had.co.nz/Functional-programming.html&#34; title=&#34;R for functional programming&#34; target=&#34;_blank&#34;&gt;functional programming&lt;/a&gt; based on piping inputs from one function to another. It&amp;#8217;s the same paradigm as the &lt;a href=&#34;http://powershell.com/cs/blogs/ebookv2/archive/2012/03/12/chapter-5-the-powershell-pipeline.aspx&#34; title=&#34;PowerShell Pipe operator explained&#34; target=&#34;_blank&#34;&gt;PowerShell operator &lt;code&gt;|&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means you can more succinctly pass an input through various transformation steps (in contrast to my initial method) with a lot less code. The ability to add conditional functions or even new functions on the fly (aka &lt;a href=&#34;http://en.wikipedia.org/wiki/Anonymous_function&#34; title=&#34;Lambda functions on wikipedia&#34; target=&#34;_blank&#34;&gt;lambda functions&lt;/a&gt;) with a similarly low code burden gives the added benefit of helping with branching logic.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>